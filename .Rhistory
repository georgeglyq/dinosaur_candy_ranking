library(dplyr)
data <- read.csv("../data/candy-data.csv", stringsAsFactors = FALSE)
getwd()
library(dplyr)
data <- read.csv("./data/candy-data.csv", stringsAsFactors = FALSE)
#function that returns the ingredient by candy name
name_function <- function(name){
selected_row <- data %>%
select(-winpercent, -pricepercent) %>%
filter(competitorname == name) %>%
mutate(Chocolate = ifelse(chocolate != 0, "YES", "NO")) %>%
mutate(Fruity = ifelse(fruity != 0, "YES", "NO")) %>%
mutate(Caramel = ifelse(caramel != 0, "YES", "NO")) %>%
mutate(Peanuty_Almondy = ifelse(peanutyalmondy != 0, "YES", "NO")) %>%
mutate(Nougat = ifelse(nougat != 0, "YES", "NO")) %>%
mutate(Crisped_Rice_Wafer = ifelse(crispedricewafer != 0, "YES", "NO")) %>%
mutate(Hard = ifelse(hard != 0, "YES", "NO")) %>%
mutate(Pluribus = ifelse(pluribus != 0, "YES", "NO")) %>%
select(Chocolate, Fruity, Caramel, Peanuty_Almondy, Nougat, Crisped_Rice_Wafer,
Hard, Pluribus, sugarpercent)
selected_row
}
View(name_function)
View(data)
name_function("100 Grand")
View(data)
library(dplyr)
data <- read.csv("./data/candy-data.csv", stringsAsFactors = FALSE)
#function that returns the ingredient by candy name
name_function <- function(name){
selected_row <- data %>%
select(-winpercent, -pricepercent) %>%
filter(competitorname == name) %>%
mutate(Chocolate = ifelse(chocolate != 0, "YES", "NO")) %>%
mutate(Fruity = ifelse(fruity != 0, "YES", "NO")) %>%
mutate(Caramel = ifelse(caramel != 0, "YES", "NO")) %>%
mutate(Peanuty_Almondy = ifelse(peanutyalmondy != 0, "YES", "NO")) %>%
mutate(Nougat = ifelse(nougat != 0, "YES", "NO")) %>%
mutate(Crisped_Rice_Wafer = ifelse(crispedricewafer != 0, "YES", "NO")) %>%
mutate(Hard = ifelse(hard != 0, "YES", "NO")) %>%
mutate(Pluribus = ifelse(pluribus != 0, "YES", "NO")) %>%
mutate(Sugar_Content = paste0(round(sugarpercent*100, digit = 2), "%")) %>%
select(Chocolate, Fruity, Caramel, Peanuty_Almondy, Nougat, Crisped_Rice_Wafer,
Hard, Pluribus, Sugar_Content)
return(selected_row)
}
#function by type e.g. snickers, giving related material
type_function <- function(type) {
#function that returns the value of the selected candy in each column
extract_value <- function(category) {data %>%
filter(competitorname == type) %>%
select(category) %>%
pull()
}
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 5 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 5) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
}
View(data)
View(name_function)
View(type_function)
type_function('Milky Way')
View(data)
type_function('100 Grand')
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 6 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 6) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
#function by type e.g. snickers, giving related material
type_function <- function(type) {
#function that returns the value of the selected candy in each column
extract_value <- function(category) {data %>%
filter(competitorname == type) %>%
select(category) %>%
pull()
}
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 6 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 6) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
}
type_function('100 Grand')
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 6 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 5) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
#function by type e.g. snickers, giving related material
type_function <- function(type) {
#function that returns the value of the selected candy in each column
extract_value <- function(category) {data %>%
filter(competitorname == type) %>%
select(category) %>%
pull()
}
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 6 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 5) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
}
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 6 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 5) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
#function by type e.g. snickers, giving related material
type_function <- function(type) {
#function that returns the value of the selected candy in each column
extract_value <- function(category) {data %>%
filter(competitorname == type) %>%
select(category) %>%
pull()
}
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 6 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 5) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
}
type_function('100 Grand')
library(dplyr)
data <- read.csv("./data/candy-data.csv", stringsAsFactors = FALSE)
#function that returns the ingredient by candy name
name_function <- function(name){
selected_row <- data %>%
select(-winpercent, -pricepercent) %>%
filter(competitorname == name) %>%
mutate(Chocolate = ifelse(chocolate != 0, "YES", "NO")) %>%
mutate(Fruity = ifelse(fruity != 0, "YES", "NO")) %>%
mutate(Caramel = ifelse(caramel != 0, "YES", "NO")) %>%
mutate(Peanuty_Almondy = ifelse(peanutyalmondy != 0, "YES", "NO")) %>%
mutate(Nougat = ifelse(nougat != 0, "YES", "NO")) %>%
mutate(Crisped_Rice_Wafer = ifelse(crispedricewafer != 0, "YES", "NO")) %>%
mutate(Hard = ifelse(hard != 0, "YES", "NO")) %>%
mutate(Pluribus = ifelse(pluribus != 0, "YES", "NO")) %>%
mutate(Sugar_Content = paste0(round(sugarpercent*100, digit = 2), "%")) %>%
select(Chocolate, Fruity, Caramel, Peanuty_Almondy, Nougat, Crisped_Rice_Wafer,
Hard, Pluribus, Sugar_Content)
return(selected_row)
}
#function by type e.g. snickers, giving related material
type_function <- function(type) {
#function that returns the value of the selected candy in each column
extract_value <- function(category) {data %>%
filter(competitorname == type) %>%
select(category) %>%
pull()
}
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 6 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 6) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
}
type_function('100 Grand')
library(dplyr)
data <- read.csv("./data/candy-data.csv", stringsAsFactors = FALSE)
#function that returns the ingredient by candy name
name_function <- function(name){
selected_row <- data %>%
select(-winpercent, -pricepercent) %>%
filter(competitorname == name) %>%
mutate(Chocolate = ifelse(chocolate != 0, "YES", "NO")) %>%
mutate(Fruity = ifelse(fruity != 0, "YES", "NO")) %>%
mutate(Caramel = ifelse(caramel != 0, "YES", "NO")) %>%
mutate(Peanuty_Almondy = ifelse(peanutyalmondy != 0, "YES", "NO")) %>%
mutate(Nougat = ifelse(nougat != 0, "YES", "NO")) %>%
mutate(Crisped_Rice_Wafer = ifelse(crispedricewafer != 0, "YES", "NO")) %>%
mutate(Hard = ifelse(hard != 0, "YES", "NO")) %>%
mutate(Pluribus = ifelse(pluribus != 0, "YES", "NO")) %>%
mutate(Sugar_Content = paste0(round(sugarpercent*100, digit = 2), "%")) %>%
select(Chocolate, Fruity, Caramel, Peanuty_Almondy, Nougat, Crisped_Rice_Wafer,
Hard, Pluribus, Sugar_Content)
return(selected_row)
}
#function by type e.g. snickers, giving related material
type_function <- function(type) {
#function that returns the value of the selected candy in each column
extract_value <- function(category) {data %>%
filter(competitorname == type) %>%
select(category) %>%
pull()
}
#filter out the candies that have values equal or close to the selected candies
#there are 9 yes/no variables in total, if more than 5 variables are identical, we put it as related
related_rows <- data %>%
mutate(count = abs(extract_value("chocolate") - chocolate) +
abs(extract_value("fruity") - fruity) +
abs(extract_value("caramel") - caramel) +
abs(extract_value("peanutyalmondy") - peanutyalmondy) +
abs(extract_value("nougat") - nougat) +
abs(extract_value("crispedricewafer") - crispedricewafer) +
abs(extract_value("hard") - hard) +
abs(extract_value("bar") - bar) +
abs(extract_value("pluribus") - pluribus)) %>%
filter(count > 5) %>%
filter(sugarpercent > extract_value("sugarpercent") - 0.05) %>%
filter(sugarpercent < extract_value("sugarpercent") + 0.05)
return(related_rows)
}
type_function('100 Grand')
